package org.silix.utils{	import flash.display.*;	import flash.geom.*;		import mx.graphics.RoundedRectangle;		public class ResizeImage extends Sprite {		public static function resizeIt(b:Loader,maxW:Number,maxH:Number):void		{			var r:Number;//ratio			r = b.height / b.width;//calculation ratio to which resize takes place			if (b.width > maxW) {				b.width = maxW;				b.height = Math.round(b.width*r);			}						if (b.height > maxH) {				b.height = maxH;				b.width = Math.round(b.height/r);			}		}						public static function fillIt(b:Loader,maxW:Number,maxH:Number):Bitmap		{			//return new Bitmap(new BitmapData(b));			//var d: BitmapData = new BitmapData(100, 100, false, 0x000000);			//d.draw(b);			//return new Bitmap(d);										var r:Number;//ratio			var _w:Number;			var _h:Number;			r = b.height / b.width;//calculating ratio to resize takes place			_w = maxW;			_h = Math.round(_w*r);			if (_h < maxH) {				_h = maxH;				_w = Math.round(_h/r);			}						// --			r = Math.min(_w/b.width,_h/b.height);			var scaleMatrix:Matrix = new Matrix();			scaleMatrix.scale(r,r);			scaleMatrix.translate(-(_w-maxW)/2, -(_h-maxH)/2);						var imageBmpData: BitmapData = new BitmapData(_w, _h, true, 0x000000);			imageBmpData.draw(b, scaleMatrix);						return new Bitmap(imageBmpData);		}						public static function zoomFillingIt(b:Loader,maxW:Number,maxH:Number):Bitmap		{			var r:Number;//ratio			var _w:Number;			var _h:Number;			r = b.height / b.width;//calculating ratio to resize takes place			_w = maxW;			_h = Math.round(_w*r);			if (_h < maxH) {				_h = maxH;				_w = Math.round(_h/r);			}						// --			r = Math.min(_w/b.width,_h/b.height);						var imageBmpData: BitmapData = new BitmapData(b.width, b.height, true, 0x000000);			imageBmpData.draw(b);						var bmp:Bitmap = new Bitmap(imageBmpData)			bmp.scaleX = r;			bmp.scaleY = r;			return bmp;		}	}}